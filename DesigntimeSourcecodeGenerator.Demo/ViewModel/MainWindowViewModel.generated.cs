// <auto-generated />
namespace DesigntimeSourcecodeGenerator.Demo.ViewModel
{
	using System;
	using System.Windows;
	using System.Windows.Controls;
	using System.ComponentModel;

	/// <summary>
	/// このクラスはMainWindowViewModelクラスの定義によって、自動生成されました。
	/// このファイルをエディタで直接編集しないでください。
	/// </summary>
	public partial class MainWindowViewModel
	{
#region Logger
		/// <summary>
		/// Logger
		/// </summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.NamingRules", "SA1311:StaticReadonlyFieldsMustBeginWithUpperCaseLetter", Justification = "Reviewed.")]
		private static readonly log4net.ILog logger = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
#endregion
#region 年齢
		/// <summary>
		/// 年齢
		/// </summary>
		public int Age { get;  set; }
#endregion
#region 名前
		/// <summary>
		/// 名前
		/// </summary>
		public string Name { get; private set; }
#endregion
#region 所属
		/// <summary>
		/// 所属
		/// </summary>
		private string _attached;
		public string Attached
		{
			get { return this._attached; }
			set 
			{ 
				if ( this._attached == value ) {
					return;
				}
				this._attached = value; 
				
				this.RaisePropertyChanged(() => this.Attached);
			}
		}
#endregion
#region 学校
		/// <summary>
		/// 学校
		/// </summary>
		private string _school;
		public string School
		{
			get { return this._school; }
			set 
			{ 
				if ( this._school == value ) {
					return;
				}
				this._school = value; 
				this.SchoolNotification();
				this.RaisePropertyChanged(() => this.School);
			}
		}
		public string SilentSchool
		{
			set 
			{ 
				if ( this._school == value ) {
					return;
				}
				this._school = value; 
				this.RaisePropertyChanged(() => this.School);
			}
		}
#endregion
#region クリック
		/// <summary>
		/// クリック
		/// </summary>
		private Livet.Commands.ViewModelCommand _clickCommand;

		public Livet.Commands.ViewModelCommand ClickCommand
		{
			get
			{
				if (this._clickCommand == null)
				{
					this._clickCommand = new Livet.Commands.ViewModelCommand(this.Click);
				}
				return this._clickCommand;
			}
		}
#endregion
#region クリック2
		/// <summary>
		/// クリック2
		/// </summary>
		private Livet.Commands.ViewModelCommand _click2Command;

		public Livet.Commands.ViewModelCommand Click2Command
		{
			get
			{
				if (this._click2Command == null)
				{
					this._click2Command = new Livet.Commands.ViewModelCommand(this.Click2, this.CanClick2);
				}
				return this._click2Command;
			}
		}
		//private bool CanClick2() { return true; }
#endregion
#region クリック3
		/// <summary>
		/// クリック3
		/// </summary>
		private Livet.Commands.ListenerCommand<string> _click3Command;

		public Livet.Commands.ListenerCommand<string> Click3Command
		{
			get
			{
				if (this._click3Command == null)
				{
					this._click3Command = new Livet.Commands.ListenerCommand<string>(this.Click3);
				}
				return this._click3Command;
			}
		}
		//private void Click3(string message) {}
#endregion
#region 選択変更
		/// <summary>
		/// 選択変更
		/// </summary>
		public delegate void SelectChangedEventHandler(object sender, SelectChangedEventArgs e);
		public event SelectChangedEventHandler SelectChanged;

		protected virtual void OnSelectChanged(SelectChangedEventArgs e)
		{
			if (this.SelectChanged != null)
			{
				this.SelectChanged(this, e);
			}
		}
		// public class SelectChangedEventArgs : EventArgs {}
#endregion
	}
}
